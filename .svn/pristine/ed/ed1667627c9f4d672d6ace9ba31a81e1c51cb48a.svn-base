package kr.or.ddit.cfms.fran.question.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;

import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.WebApplicationContext;

import kr.or.ddit.cfms.commons.vo.BoardVO;
import kr.or.ddit.cfms.commons.vo.ComCodeGrpVO;
import kr.or.ddit.cfms.commons.vo.PagingVO;
import kr.or.ddit.cfms.enumpkg.ServiceResult;
import kr.or.ddit.cfms.fran.question.service.IFranQuestionService;
import kr.or.ddit.cfms.fran.question.vo.FranQuestionVO;
import kr.or.ddit.cfms.head.inven.vo.HeadInvenVO;
import kr.or.ddit.cfms.head.notice.service.IHeadNoticeService;

/**
 * @author 이진수
 * @since 2021. 5. 19
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                          수정자               수정내용
 * --------     --------    ----------------------
 * 2021. 5. 19      작성자명       최초작성
 * Copyright (c) 2021 by DDIT All right reserved
 * </pre>
 */
@Controller
@RequestMapping("/fran/question")
public class FranQuestionController {
	 @Inject
	 private IFranQuestionService service;
		@Inject
		private WebApplicationContext container;
		private ServletContext application;
		@PostConstruct
		public void init() {
			application = container.getServletContext();
		}
	@GetMapping
	public String questionList(@RequestParam(value="page", required=false, defaultValue="1") int currentPage
			, @RequestParam(value="searchType", required=false) String searchType
			, @RequestParam(value="searchWord", required=false) String searchWord
			, @RequestParam(value="minDate", required=false) String minDate
			, @RequestParam(value="maxDate", required=false) String maxDate,
			HttpSession session,
			 Model model) {
		PagingVO<FranQuestionVO> pagingVO = listForAjax(currentPage, searchType, searchWord,minDate,maxDate,session);
		model.addAttribute("pagingVO", pagingVO);
		comCode(model);
		
		
		return "/fran/question/questionList";
		
	}
	@RequestMapping(produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public PagingVO<FranQuestionVO> listForAjax(
			@RequestParam(value="page", required=false, defaultValue="1") int currentPage
			, @RequestParam(value="searchType", required=false) String searchType
			, @RequestParam(value="searchWord", required=false) String searchWord
			, @RequestParam(value="minDate", required=false) String minDate
			, @RequestParam(value="maxDate", required=false) String maxDate	
			, HttpSession session
			
			){
		
		
		PagingVO<FranQuestionVO> pagingVO = new PagingVO<>(10, 5);
		pagingVO.setCurrentPage(currentPage);
		// 검색 조건
		Map<String, Object> searchMap = new HashMap<>();
		searchMap.put("searchType", searchType);
		searchMap.put("searchWord", searchWord);
		searchMap.put("minDate", minDate);
		searchMap.put("maxDate", maxDate);
		pagingVO.setSearchMap(searchMap);
		String code = (String) session.getAttribute("code");
		String id = (String) session.getAttribute("authId");
		
		String code2 = code.substring(0,5);
		System.out.println("안녕하세요"+code2);
		
		
		pagingVO.setDetailSearch(new FranQuestionVO(code2,id));
		
		
		int totalRecord = service.selectQuestionCount(pagingVO);
		
		pagingVO.setTotalRecord(totalRecord);
		
		List<FranQuestionVO> boardList = service.selectQuestionsList(pagingVO);
		
		pagingVO.setDataList(boardList);
		
		return pagingVO;
	}
	//공통코드 
		public void comCode(Model model) {
			ComCodeGrpVO qccCode = service.selectCodeList("QCC");
			ComCodeGrpVO qstCode = service.selectCodeList("QST");
			
			model.addAttribute("qccCode", qccCode);
			model.addAttribute("qstCode", qstCode);
		/*	model.addAttribute("orsCode", orcCode);
			model.addAttribute("oscCode", oscCode);
			model.addAttribute("istCode", iscCode);*/
		}
	

	
	@GetMapping("/detail")
	public String questionDetail() {
		return "/fran/question/questionDetail";
		
	}
	
	@GetMapping("/form")
	public String noticeForm(@ModelAttribute("board") FranQuestionVO board
			, HttpSession session
			, Model model) {
		comCode(model);
	
		board.setQues_writer((String) session.getAttribute("authId"));
		
	/*	String id2 = (String) session.getAttribute("authId");
		String adminauth=null;
		String admin = "ADMIN";
	
		if(id2.equals(admin)) {
			adminauth="ok";
			
		}*/
	/*	model.addAttribute("adminauth",adminauth);*/
		return "/fran/question/questionForm";	
	}
	
	@RequestMapping(value="/form", method=RequestMethod.POST)
	public String insert(
			@ModelAttribute("board") FranQuestionVO board
			, Errors errors
			, Model model
			, HttpSession session
			) {
		/*board.setHead_code((String) session.getAttribute("code"));
		board.setBoard_writer((String) session.getAttribute("authId"));*/
		boolean valid = !errors.hasErrors();
		
		String view = null;
		String message = null;
		String code = (String) session.getAttribute("code");
		if(code != null) {
			code = code.substring(0, 5);
		}
		if(valid) {
			board.setHead_code(code);
			ServiceResult result = service.insertQuestion(board);
			if(ServiceResult.OK.equals(result)) {
				view = "redirect:/fran/question";
			}else {
				message = "서버 오류";
				view = "/fran/question/form";
			}
		}else {
			view = "/fran/question/form";
		}
		
		model.addAttribute("message", message);
		
		return view;
	}

	
	@PostMapping
	public String insert() {
		return null;
		
	}
}
