package kr.or.ddit.cfms.head.employee.controller;

import java.io.FileInputStream;
import java.io.InputStream;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.cfms.commons.vo.AttachfileVO;
import kr.or.ddit.cfms.commons.vo.ComCodeVO;
import kr.or.ddit.cfms.commons.vo.PagingVO;
import kr.or.ddit.cfms.enumpkg.ServiceResult;
import kr.or.ddit.cfms.head.employee.service.IHeadEmployeeService;
import kr.or.ddit.cfms.head.employee.vo.DeptVO;
import kr.or.ddit.cfms.head.employee.vo.EmployeeVO;
import kr.or.ddit.cfms.head.limit.vo.LimitSearchVO;

/**
 * @author 이진수
 * @since 2021. 5. 19
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                          수정자               수정내용
 * --------     --------    ----------------------
 * 2021. 5. 19      작성자명       최초작성
 * 2021. 6. 7       진예은          직원목록조회
 * 2021. 6. 8       진예은          직원등록(파일첨부)
 * Copyright (c) 2021 by DDIT All right reserved
 * </pre>
 */
@Controller
@RequestMapping("/head/employee")
public class EmployeeController {

	@Inject
	private IHeadEmployeeService service;
	
	private final Logger logger = LoggerFactory.getLogger(EmployeeController.class);
	
	@GetMapping
	public String employeeList(
			@RequestParam(value="page", required=false, defaultValue="1") int currentPage,
			HttpSession session,
			Model model,
			@RequestParam(value = "selector", required = false, defaultValue = "10") int selectorRow
			) {
		
		PagingVO<EmployeeVO> pagingVO = listForAjax(currentPage, session, selectorRow);
		model.addAttribute("pagingVO", pagingVO);
		
		
		return "/head/employee/employeeList";
		
	}
	
	@RequestMapping(produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public PagingVO<EmployeeVO> listForAjax(
			@RequestParam(value="page", required=false, defaultValue="1") int currentPage,
			HttpSession session,
			@RequestParam(value = "selector", required = false, defaultValue = "10") int selectorRow
			){

		/** 파라미터 조회 */
		String headCode = (String) session.getAttribute("code");
		
		/** 결과자료 객체 생성 */
		PagingVO<EmployeeVO> pagingVO = new PagingVO<>(selectorRow, 10);
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setHead_code(headCode);
		
		int totalRecord = service.selectEmpCount(headCode);
		pagingVO.setTotalRecord(totalRecord);
		
		/** 서비스 요청 */
		List<EmployeeVO> empList = service.selectEmpList(pagingVO);
		pagingVO.setDataList(empList);
		
		
		for(EmployeeVO employeeVO : pagingVO.getDataList()) {
			imageBase(employeeVO);
		}
		/** 결과 전송 */
		return pagingVO;
	}
	
	
	
	@GetMapping("/detail")
	public String employeeDetail(
			@RequestParam("what") String empId,
			Model model
			) {
		
		EmployeeVO employeeOne = service.selectEmpOne(empId);
		imageBase(employeeOne);
		
		model.addAttribute("employeeOne", employeeOne);
		
		return "/head/employee/employeeDetail";
		
	}
	
	@GetMapping("/form")
	public String employeeForm(
				Model model,
				HttpSession session
			) {
		/** 파라미터 조회 */
		String headCode = (String) session.getAttribute("code");
		
		List<ComCodeVO> comcodeECL = service.comcodeECL();
		List<ComCodeVO> comcodeESE = service.comcodeESE();
		List<DeptVO> deptList = service.selectDept(headCode);
		
		model.addAttribute("comcodeECL", comcodeECL);
		model.addAttribute("comcodeESE", comcodeESE);
		model.addAttribute("deptList", deptList);
		
		
		return "/head/employee/employeeForm";
	}
	
	@PostMapping
	public String insert(
			HttpSession session,
			@ModelAttribute("employee") EmployeeVO employee
			) {
		

		logger.info("================EMPLOYEEVO 값 {}===================", employee);
		logger.info("================EMPLOYEEVO 값 {}===================", employee);
		logger.info("================EMPLOYEEVO 값 {}===================", employee);
		logger.info("================EMPLOYEEVO 값 {}===================", employee);
		logger.info("================EMPLOYEEVO 값 {}===================", employee);
		logger.info("================EMPLOYEEVO 값 {}===================", employee);
		
		/** 파라미터 조회 */
		String headCode = (String) session.getAttribute("code");
		List<EmployeeVO> empUseList = service.selectEmpUseAt(headCode);
		employee.setHead_code(headCode);
		ServiceResult result = null;
		String view = null;
		
		if(empUseList != null) {
			result = service.insertEmpOk(employee);
			
		}else {
			result = service.insertEmpNo(employee);
		}
		
		if(ServiceResult.OK.equals(result)) {
			view = "redirect:/head/employee";
			
		}
		
		
		return view;
		
	}
	
	private void imageBase(EmployeeVO employeeVO) {
		
		InputStream imageStream;
		if(employeeVO.getAttachfileList().size() > 0 || !employeeVO.getAttachfileList().isEmpty()) {
			
			for(AttachfileVO attach : employeeVO.getAttachfileList()) {
				try {
					// FileInputStream으로 파일을 불러온다
					imageStream = new FileInputStream(attach.getFile_path()+"/"+attach.getSave_filenm());
					// IOUtils.toByteArray 바이트배열로 바꿔서 저장
					byte[] imageBtyeArray = IOUtils.toByteArray(imageStream);
					imageStream.close();
					// 이진데이터로 바꾼다
					// 바이트배열을 Base64.encodeBase64형식에 맞춰서 인코딩 하는 작업
					byte[] encodeBase64 = Base64.encodeBase64(imageBtyeArray);
					// 인코딩 된 데이터를 보내준다.
					String base64DataString = new String(encodeBase64, "UTF-8");
					// file_img저장될때는 사용되는게 아니고 이미지를 표현할떄 사용된다.
					attach.setFile_img(base64DataString);
				} catch (Exception e) {
					// TODO: handle exception
				}
			}
		}
		
		
	}
	
	
	
	
	
	
	@GetMapping("/modify")
	public String updateForm() {
		return "/head/employee/employeeForm";
		
	}
	
	@PutMapping
	public String update() {
		return null;
		
	}
	
	@DeleteMapping
	public String delete() {
		return null;
		
	}
}
