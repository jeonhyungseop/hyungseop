package kr.or.ddit.cfms.login.service;

import java.lang.reflect.InvocationTargetException;
import javax.inject.Inject;
import org.apache.commons.beanutils.BeanUtils;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import kr.or.ddit.cfms.enumpkg.ServiceResult;
import kr.or.ddit.cfms.login.dao.ILoginDAO;
import kr.or.ddit.cfms.login.vo.CustomUserDetails;
import kr.or.ddit.cfms.login.vo.UserVO;
import kr.or.ddit.cfms.utils.CryptoUtil;

@Service("authService")
public class LoginServiceImpl implements ILoginService, UserDetailsService{
	@Inject
	private ILoginDAO loginDAO;

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		UserVO savedMember = loginDAO.selectForAuth(username);
		if(savedMember == null) {
			throw new UsernameNotFoundException("사용자를 찾을 수 없음");
		}
		return new CustomUserDetails(savedMember);
	}
	
	@Override
	public ServiceResult authenticate(UserVO user) {
		UserVO savedUser = loginDAO.selectForAuth(user.getId());
		ServiceResult result  = null;
		if(savedUser != null) {
			String inputPass = user.getPass();
			try {
				String encodedPass = CryptoUtil.sha512(inputPass);
				String savedPass = savedUser.getPass();
				if(savedPass.equals(encodedPass)) {
					try {
						BeanUtils.copyProperties(user, savedUser);
					}catch (IllegalAccessException | InvocationTargetException e) {
						throw new RuntimeException(e);
					}
					
					result = ServiceResult.OK;
				}else {
					result = ServiceResult.INVALIDPASSWORD;
				}
			}catch (Exception e) {
				result = ServiceResult.FAIL;
			}
		}else {
			result = ServiceResult.NOTEXIST;
		}
		return result;
	}
	
}
