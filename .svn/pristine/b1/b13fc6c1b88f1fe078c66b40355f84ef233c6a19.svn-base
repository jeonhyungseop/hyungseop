package kr.or.ddit.cfms.fran.prod.controller;

import java.io.FileInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.cfms.commons.vo.AttachfileVO;
import kr.or.ddit.cfms.commons.vo.PagingVO;
import kr.or.ddit.cfms.enumpkg.ServiceResult;
import kr.or.ddit.cfms.fran.prod.service.IFranProdService;
import kr.or.ddit.cfms.fran.prod.vo.OrderListVO;
import kr.or.ddit.cfms.fran.prod.vo.OrderVO;
import kr.or.ddit.cfms.head.inven.service.IHeadInvenService;
import kr.or.ddit.cfms.head.inven.vo.HeadInvenVO;
import kr.or.ddit.cfms.head.inven.vo.UnitpcListVO;
import kr.or.ddit.cfms.head.limit.vo.OrdlistVO;
import kr.or.ddit.cfms.utils.ImageBase64Util;

/**
 * @author 이진수
 * @since 2021. 5. 19
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                          수정자               수정내용
 * --------     --------    ----------------------
 * 2021. 5. 19      작성자명       최초작성
 * Copyright (c) 2021 by DDIT All right reserved
 * </pre>
 */
@Controller
@RequestMapping("/fran/prod")
public class FranProdController {
	private static final Logger logger = LoggerFactory.getLogger(FranProdController.class);
	
	@Inject
	private IFranProdService service;
	
	@Inject
	private IHeadInvenService headInvenService;
	
	@GetMapping
	public String prodList(
			@RequestParam(value="page", required=false, defaultValue="1") int currentPage
			, @RequestParam(value = "selector", required = false, defaultValue = "10") int selectorRow
			, @RequestParam(value="searchType", required=false) String searchType
			, @RequestParam(value="searchWord", required=false) String searchWord
			, Model model
			, HttpSession session
			) {
		PagingVO<HeadInvenVO> pagingVO = listForAjax(currentPage, selectorRow, searchType, searchWord, session);
		
		model.addAttribute("headPagingVO", pagingVO);
		return "/fran/prod/prodList";
	}
	
	
	@RequestMapping(produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public PagingVO<HeadInvenVO> listForAjax(
		@RequestParam(value="page", required=false, defaultValue="1") int currentPage
		, @RequestParam(value = "selector", required = false, defaultValue = "10") int selectorRow
		, @RequestParam(value="searchType", required=false) String searchType
		, @RequestParam(value="searchWord", required=false) String searchWord
//		, @ModelAttribute("searchVO") SearchVO searchVO
		, HttpSession session
	) {
		
		/** 파라미터 조회 - 세션에 담긴 가맹본부 코드 저장 */
		String headCode = (String) session.getAttribute("code");
		if(headCode!=null) { headCode = headCode.substring(0,5); }
		
		/** 결과자료 객체생성 */ 
		PagingVO<HeadInvenVO> pagingVO = new PagingVO<>(5, 10, currentPage); /** 보낼자료 */ 
		pagingVO.addSearchMap("searchType", searchType); /** 검색조건 */
		pagingVO.addSearchMap("searchWord", searchWord); /** 검색타입 */
		pagingVO.setDetailSearch(new HeadInvenVO(headCode));
		
		/** 파라미터 검증 */
		
		/** 서비스 데이터 구성 */ 
		
		/** 서비스 요청 */ 
		service.selectMainInfo(pagingVO);
		
		/** 결과 전송 */
		return pagingVO;
	}
	
	private void imageBase(HeadInvenVO headInven) {
		InputStream imageStream;
		if(headInven.getAttachfileList().size() > 0 || !headInven.getAttachfileList().isEmpty()) {
			
			for(AttachfileVO attach : headInven.getAttachfileList()) {
				try {
					
					/** 썸네일 이미지 */ 
					
					// FileInputStream으로 파일을 불러온다
					imageStream = new FileInputStream(attach.getFile_path()+"/"+attach.getSave_filenm());
					// IOUtils.toByteArray 바이트배열로 바꿔서 저장
					byte[] imageBtyeArray = IOUtils.toByteArray(imageStream);
					imageStream.close();
					// 이진데이터로 바꾼다
					// 바이트배열을 Base64.encodeBase64형식에 맞춰서 인코딩 하는 작업
					byte[] encodeBase64 = Base64.encodeBase64(imageBtyeArray);
					// 인코딩 된 데이터를 보내준다.
					String base64DataString = new String(encodeBase64, "UTF-8");
					// file_img저장될때는 사용되는게 아니고 이미지를 표현할떄 사용된다.
					attach.setFile_img(base64DataString);
				} catch (Exception e) {
					// TODO: handle exception
				}
			}
			
		}
	}
	
//	@GetMapping("/detail")
//	public String prodDetail(
//			@RequestParam(value = "what", required = true) String prod_code
//			, Model model
//			, HttpSession session
//			) {
//		HeadInvenVO headInven = new HeadInvenVO();
//		String head_code = (String) session.getAttribute("code");
//		headInven.setHead_code(head_code.substring(0,5));
//		headInven.setProd_code(prod_code);
//		headInven = headInvenService.retrieveHeadInven(headInven);
//		ImageBase64Util imageBase64Util = new ImageBase64Util();
//		imageBase64Util.imageBase(headInven.getAttachfileList());
//		
//		model.addAttribute("inven", headInven);
//		return "/fran/prod/prodDetail";
//		
//	}
//	
//	@GetMapping("/form")
//	public String prodForm() {
//		return "/fran/prod/prodForm";
//		
//	}
	
	@PostMapping
	public String prodinsert(
			@ModelAttribute("orderListVO") OrderListVO orderListVO
			, Model model
			, HttpSession session
			) {
		String view = null;
		OrderVO orderVO = new OrderVO();
		orderVO.setFran_code((String) session.getAttribute("code"));
		if(orderVO != null) {
			orderListVO.setOrderVO(orderVO);
		}
		ServiceResult result = service.insertOrder(orderListVO);
		
		if(ServiceResult.OK.equals(result)) {
			view = "redirect:/fran/prod";
		}else {
			view = "/fran/prod";
			service.selectProdList(orderListVO);
			model.addAttribute("orderListVO", orderListVO);
		}
		
		return view;
		
	}
	@GetMapping(value = "/unitpclist", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public List<UnitpcListVO> unitpclist(
			@RequestParam("prod_code") String prod_code
			) {
		logger.info("단가 변동 볼꺼다 prod_code == {}", prod_code);
		List<UnitpcListVO> unitpcListVO = headInvenService.retrieveUnitpcList(prod_code);
		logger.info("가져온 값 {}", unitpcListVO);
		return unitpcListVO;
	}
}
