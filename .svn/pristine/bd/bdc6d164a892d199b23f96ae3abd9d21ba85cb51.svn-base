package kr.or.ddit.cfms.head.limit.controller;

import java.io.FileInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.cfms.commons.vo.AttachfileVO;
import kr.or.ddit.cfms.commons.vo.ComCodeGrpVO;
import kr.or.ddit.cfms.commons.vo.PagingVO;
import kr.or.ddit.cfms.head.deposit.controller.HeadDepositController;
import kr.or.ddit.cfms.head.inven.vo.HeadInvenVO;
import kr.or.ddit.cfms.head.limit.service.IHeadLimitService;
import kr.or.ddit.cfms.head.limit.vo.LimitSearchVO;
import kr.or.ddit.cfms.head.limit.vo.OrdersVO;
import kr.or.ddit.cfms.head.limit.vo.OrdlistVO;

/**
 * @author 이진수
 * @since 2021. 5. 19
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                          수정자               수정내용
 * --------     --------    ----------------------
 * 2021. 5. 19      작성자명       최초작성
 * Copyright (c) 2021 by DDIT All right reserved
 * </pre>
 */
@Controller
@RequestMapping("/head/limit")
public class HeadLimitController {
	private static final Logger logger = LoggerFactory.getLogger(HeadDepositController.class);
	
	@Inject
	private IHeadLimitService service;
	
	@PostConstruct
	public void init() {
		logger.info("{} 초기화, {} 주입됨.", getClass().getSimpleName(), service.getClass().getSimpleName());
	}
	
	@GetMapping
	public String limitList(
			@ModelAttribute LimitSearchVO limitSearchVO,
			HttpSession session,
			Model model
			) {
		
		logger.info("--------------------VO : {}", limitSearchVO.toString());
		PagingVO<OrdersVO> pagingVO = listForAjax(limitSearchVO, session);
		
		comCode(model);
		model.addAttribute("pagingVO", pagingVO);
		
		
		return "/head/limit/limitList";
	}
	
	
	@RequestMapping(produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public PagingVO<OrdersVO> listForAjax(
			@ModelAttribute LimitSearchVO limitSearchVO,
			HttpSession session
			){
		
		/** 파라미터 조회 */
		String headCode = (String) session.getAttribute("code");
		
		/** 결과자료 객체 생성 
		 * 	new PagingVO<>(screenSize, blockSize, cuurentSize, searchMapVO)
		 *  검색 조건을 VO에 담아서 넣으면 자동으로 searchMap에 들어감 
		 * */
		PagingVO<OrdersVO> pagingVO = new PagingVO<>(limitSearchVO.getScreenSize() , 10, limitSearchVO.getPage(), limitSearchVO);
		pagingVO.setDetailSearch(new OrdersVO(headCode));
		
		/** 파라미터 검증 */
		
		/** 서비스 데이터 구성 */ 
		
		/** 서비스 요청 */
		service.selectMainInfo(pagingVO);
		
		/** 결과 전송 */
		return pagingVO;
	}
	
	//공통코드 
	public void comCode(Model model) {
		ComCodeGrpVO orcCode = service.retrieveCodeList("ORS");
		ComCodeGrpVO oscCode = service.retrieveCodeList("OSC");
		ComCodeGrpVO iscCode = service.retrieveCodeList("IST");
		model.addAttribute("orsCode", orcCode);
		model.addAttribute("oscCode", oscCode);
		model.addAttribute("istCode", iscCode);
	}
	
	@GetMapping("/detail")
	public String limitDetail(
			@RequestParam("what") String orderNo,
			Model model
			) {
		/** 결과자료 객체 생성*/
		OrdersVO ordersVO = new OrdersVO(); 
		
		/** 서비스 요청 */
		ordersVO = service.retriveHeadLimitDetail(orderNo);
		
		/** 결과 전송 */
		model.addAttribute("ordersVO", ordersVO);
		
		return "/head/limit/limitDetail";
		
	}
	
	private void imageBase(HeadInvenVO headInven) {
		InputStream imageStream;
		if(headInven.getAttachfileList().size() > 0 || !headInven.getAttachfileList().isEmpty()) {
			
			for(AttachfileVO attach : headInven.getAttachfileList()) {
				try {
					// FileInputStream으로 파일을 불러온다
					imageStream = new FileInputStream(attach.getFile_path()+"/"+attach.getSave_filenm());
					// IOUtils.toByteArray 바이트배열로 바꿔서 저장
					byte[] imageBtyeArray = IOUtils.toByteArray(imageStream);
					imageStream.close();
					// 이진데이터로 바꾼다
					// 바이트배열을 Base64.encodeBase64형식에 맞춰서 인코딩 하는 작업
					byte[] encodeBase64 = Base64.encodeBase64(imageBtyeArray);
					// 인코딩 된 데이터를 보내준다.
					String base64DataString = new String(encodeBase64, "UTF-8");
					// file_img저장될때는 사용되는게 아니고 이미지를 표현할떄 사용된다.
					attach.setFile_img(base64DataString);
				} catch (Exception e) {
					// TODO: handle exception
				}
			}
			
		}
	}
	
	
	@RequestMapping(value = "/order")
	public String orderOk(
			@RequestParam(value = "orderNO") String orderNO,
			@RequestParam(value = "code") String code
			) {
		
		Map<String, String>orderMap = new HashMap<>();
		orderMap.put("orderNO", orderNO);
		orderMap.put("code", code);
		
		String msg = null;
		
		int cnt = service.modifyOrder(orderMap);
	
		
		return "redirect:/head/limit/detail?what="+orderNO;
	}
	
	@GetMapping("/form")
	public String limitForm(
			@RequestParam("what") String orderNo,
			Model model
			) {
		/** 결과자료 객체 생성*/
		PagingVO<OrdersVO> pagingVO = new PagingVO<>(10,5); 
		
		/** 서비스 요청 */
		pagingVO.setDetailSearch(service.retriveHeadLimitDetail(orderNo));
		
		/** 결과 전송 */
		model.addAttribute("pagingVO", pagingVO);
		
		return "/head/limit/limitForm";
	}
	
	@PostMapping
	public String insert() {
		return null;
		
	}
	
}
